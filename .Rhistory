t_brier[i] = Brier(object,pre_sp,t_star)
}
t2=proc.time()
t=t2-t1
print(paste0('执行时间：',t[3][[1]],'秒'))
t_IBS = 0
for (i in 1:(length(IBSrange)-1)) {
t_IBS = t_IBS + (IBSrange[i+1] - IBSrange[i])*t_brier[i]
}
names(t_IBS) = 'IBS'
return(t_IBS)
}else {
t_brier = rep(0)
t_IBSrange = range(IBSrange)
p = ncol(sp_matrix)
#Simulation to generate discrete time series
IBSrange = seq(t_IBSrange[1],t_IBSrange[2],length = p)
for (i in 1:length(IBSrange)) {
pre_sp = sp_matrix[,i]
t_star = IBSrange[i]
t_brier[i] = Brier(object,pre_sp,t_star)
}
t_IBS = 0
for (i in 1:(length(IBSrange)-1)) {
t_IBS = t_IBS + (IBSrange[i+1] - IBSrange[i])*t_brier[i]
}
t_IBS = t_IBS/(range(IBSrange)[2] - range(IBSrange)[1])
names(t_IBS) = 'IBS'
return(t_IBS)
}
}
library(randomForestSRC)
library(MASS)
library(survival)
set.seed(123)
N=100
p = 25
c.mean = 0.4
mu = rep(0,p)
Si = matrix(0,p,p)
for (i in 1:p) {
for (j in 1:p) {
Si[i,j] = 0.9^abs(i-j)
}
}
W = mvrnorm(N,mu,Si)
Ti = rep(0,N)
for (i in 1:N) {
t.mu = exp(0.1*sum(W[i,1:round(p/2)]))
Ti[i] = rexp(1,1/t.mu)
}
c.time = rexp(N,c.mean)
mydata.x = as.data.frame(W)
mydata.time = data.frame('time'=Ti,'c.time' = c.time,'status' = 0)
mydata.time$status = ifelse(mydata.time$time < mydata.time$c.time,1,0)
mydata.time$time = apply(mydata.time[,1:2],1,min)
mydata = data.frame('time' = mydata.time$time,'status' = mydata.time$status,W)
index.train = sample(1:N,2/3*N)
data.train = mydata[index.train,]
data.test = mydata[-index.train,]
fit.RSF = rfsrc(Surv(time,status)~.,data.train,nsplit=3,ntree=500)
predicted = predict(fit.RSF,data.test)
sp_matrix = predicted$survival
object = Surv(data.test$time,data.test$status)
#the default time points
IBS(object,sp_matrix)
#a time range
IBS(object,sp_matrix,c(18:100))
devtools::document()
devtools::check_rhub()
devtools::check_rhub()
library(devtools)
?check_rhub
check_win_devel()
roxygen2::vignette_roclet()
roxygen2::load_source()
library(pandox)
library(pandoc)
install.packages('pandoc')
usethis::use_cran_comments()
usethis::use_cran_comments()
devtools::check_rhub(email = 'zhouhanpu@csu.edu.cn')
rhub::check_for_cran()
rhub::validate_email()
devtools::check_rhub()
devtools::document()
devtools::check_rhub()
devtools::check_rhub()
check()
usethis::use_cran_comments()
usethis::use_cran_comments()
devtools::spell_check()
devtools::document()
devtools::submit_cran()
devtools::check_rhub()
library(evtools)
library(devtools)
?check_rhub
check_win_devel()
library(SurvMetrics)
library(caret)
library(randomForestSRC)
library(survival)
library(pec)
library(ggplot2)
set.seed(123)
#Initialization
metrics_cox = 0
metrics_rsf = 0
for (i in 1:20) {
mydata = SDGM4(N = 100, p = 20, c_step = 0.2)
index_data = createFolds(1:nrow(mydata), 2)
train_data = mydata[index_data[[1]],]
test_data = mydata[index_data[[2]],]
#fit the models
fitrsf = rfsrc(Surv(time, status)~., data = train_data, nsplit = 3, ntree = 500)
mat_rsf = predict(fitrsf, test_data)$survival
dis_time = fitrsf$time.interest
fitcox = coxph(Surv(time, status)~., data = train_data, x = TRUE)
mat_cox = predictSurvProb(fitcox, test_data, dis_time)
#calculate the C index
med_index = median(1:length(dis_time))
surv_obj = Surv(test_data$time, test_data$status)
#C index for Cox
metrics_cox[i] = Cindex(surv_obj, predicted = mat_cox[, med_index])
#C index for RSF
metrics_rsf[i] = Cindex(surv_obj, predicted = mat_rsf[, med_index])
}
data_CI = data.frame('Cindex' = c(metrics_cox, metrics_rsf),
'model' = c(rep('Cox', 20), rep('RSF', 20)))
ggplot(data_CI, aes(x = model, y = Cindex, fill = model)) +
geom_boxplot() +
scale_fill_manual(values = c("#FFBBCC", "#88CCFF"))
#Initialization
metrics_cox = 0
metrics_rsf = 0
set.seed(1234)
for (i in 1:10) {
mydata = SDGM4(N = 200, p = 20, c_step = 0.5)
index_data = createFolds(1:nrow(mydata), 2)
train_data = mydata[index_data[[1]],]
test_data = mydata[index_data[[2]],]
#fit the models
fitrsf = rfsrc(Surv(time, status)~., data = train_data, nsplit = 3, ntree = 500)
mat_rsf = predict(fitrsf, test_data)$survival
dis_time = fitrsf$time.interest
fitcox = coxph(Surv(time, status)~., data = train_data, x = TRUE)
mat_cox = predictSurvProb(fitcox, test_data, dis_time)
#calculate the Brier Score
med_index = median(1:length(dis_time))
surv_obj = Surv(test_data$time, test_data$status)
t_star = median(fitrsf$time.interest)
#Brier Score for Cox
metrics_cox[i] = Brier(surv_obj, pre_sp = mat_cox[, med_index], t_star)
#Brier Score for RSF
metrics_rsf[i] = Brier(surv_obj, pre_sp = mat_rsf[, med_index], t_star)
}
data_BS = data.frame('BS' = c(metrics_cox, metrics_rsf),
'model' = c(rep('Cox', 20), rep('RSF', 20)))
ggplot(data_BS, aes(x = model, y = BS, fill = model)) +
geom_boxplot() +
scale_fill_manual(values = c("#FFBBCC", "#88CCFF"))
#Initialization
metrics_cox = 0
metrics_rsf = 0
set.seed(1234)
for (i in 1:10) {
mydata = SDGM4(N = 100, p = 20, c_step = 0.5)
index_data = createFolds(1:nrow(mydata), 2)
train_data = mydata[index_data[[1]],]
test_data = mydata[index_data[[2]],]
#fit the models
fitrsf = rfsrc(Surv(time, status)~., data = train_data, nsplit = 3, ntree = 500)
mat_rsf = predict(fitrsf, test_data)$survival
dis_time = fitrsf$time.interest
fitcox = coxph(Surv(time, status)~., data = train_data, x = TRUE)
mat_cox = predictSurvProb(fitcox, test_data, dis_time)
#calculate the Brier Score
med_index = median(1:length(dis_time))
surv_obj = Surv(test_data$time, test_data$status)
t_star = median(fitrsf$time.interest)
#Brier Score for Cox
metrics_cox[i] = Brier(surv_obj, pre_sp = mat_cox[, med_index], t_star)
#Brier Score for RSF
metrics_rsf[i] = Brier(surv_obj, pre_sp = mat_rsf[, med_index], t_star)
}
data_BS = data.frame('BS' = c(metrics_cox, metrics_rsf),
'model' = c(rep('Cox', 10), rep('RSF', 10)))
ggplot(data_BS, aes(x = model, y = BS, fill = model)) +
geom_boxplot() +
scale_fill_manual(values = c("#FFBBCC", "#88CCFF"))
#Initialization
metrics_cox = 0
metrics_rsf = 0
set.seed(123)
for (i in 1:5) {
mydata = SDGM4(N = 100, p = 20, c_step = -0.5)
index_data = createFolds(1:nrow(mydata), 2)
train_data = mydata[index_data[[1]],]
test_data = mydata[index_data[[2]],]
#fit the models
fitrsf = rfsrc(Surv(time, status)~., data = train_data, nsplit = 3, ntree = 500)
mat_rsf = predict(fitrsf, test_data)$survival
dis_time = fitrsf$time.interest
fitcox = coxph(Surv(time, status)~., data = train_data, x = TRUE)
mat_cox = predictSurvProb(fitcox, test_data, dis_time)
#calculate the IBS
med_index = median(1:length(dis_time))
surv_obj = Surv(test_data$time, test_data$status)
#IBS for Cox
metrics_cox[i] = IBS(surv_obj, sp_matrix = mat_cox, dis_time)
#IBS for RSF
metrics_rsf[i] = IBS(surv_obj, sp_matrix = mat_rsf, dis_time)
}
data_IBS = data.frame('IBS' = c(metrics_cox, metrics_rsf),
'model' = c(rep('Cox', 5), rep('RSF', 5)))
ggplot(data_IBS, aes(x = model, y = IBS, fill = model)) +
geom_boxplot() +
scale_fill_manual(values = c("#FFBBCC", "#88CCFF"))
#Initialization
metrics_cox_IAE = 0
metrics_rsf_IAE = 0
metrics_cox_ISE = 0
metrics_rsf_ISE = 0
set.seed(123)
for (i in 1:10) {
mydata = SDGM4(N = 100, p = 20, c_step = 0.2)
index_data = createFolds(1:nrow(mydata), 2)
train_data = mydata[index_data[[1]],]
test_data = mydata[index_data[[2]],]
#fit the models
fitrsf = rfsrc(Surv(time, status)~., data = train_data, nsplit = 3, ntree = 500)
mat_rsf = predict(fitrsf, test_data)$survival
dis_time = fitrsf$time.interest
fitcox = coxph(Surv(time, status)~., data = train_data, x = TRUE)
mat_cox = predictSurvProb(fitcox, test_data, dis_time)
#calculate the IAE and ISE
med_index = median(1:length(dis_time))
surv_obj = Surv(test_data$time, test_data$status)
#IAE and ISE for Cox
temp1 = IAEISE(surv_obj, sp_matrix = mat_cox, dis_time)
metrics_cox_IAE[i] = temp1[1]
metrics_cox_ISE[i] = temp1[2]
#IAE and ISE for RSF
temp2 = IAEISE(surv_obj, sp_matrix = mat_rsf, dis_time)
metrics_rsf_IAE[i] = temp2[1]
metrics_rsf_ISE[i] = temp2[2]
}
data_IAE = data.frame('IAE' = c(metrics_cox_IAE, metrics_rsf_IAE),
'model' = c(rep('Cox', 10), rep('RSF', 10)))
data_ISE = data.frame('ISE' = c(metrics_cox_ISE, metrics_rsf_ISE),
'model' = c(rep('Cox', 10), rep('RSF', 10)))
P1 = ggplot(data_IAE, aes(x = model, y = IAE, fill = model)) +
geom_boxplot() +
scale_fill_manual(values = c("#FFBBCC", "#88CCFF")) +
theme(legend.position = 'none')
P2 = ggplot(data_ISE, aes(x = model, y = ISE, fill = model)) +
geom_boxplot() +
scale_fill_manual(values = c("#FFBBCC", "#88CCFF")) +
theme(legend.position = 'none')
library(ggpubr)
ggarrange(P1, P2, ncol = 2)
devtools::build()
devtools::check_rhub()
?cherk_rhub
??check_rhub
rhub::validate_email()
devtools::check_rhub()
remove.packages("devtools")
install.packages('devtools')
remove.packages("rhub")
install.packages('rhub')
devtools::check_rhub()
devtools::check()
devtools::check()devtools::submit_cran()
devtools::submit_cran()
devtools::check_win_devel()
devtools::document()
devtools::check_win_devel()
devtools::check_win_devel()
devtools::check_win_devel()
devtools::document()
devtools::check_win_devel()
devtools::document()
devtools::check_win_devel()
devtools::check()
devtools::build()
devtools::check_win_release()
devtools::submit_cran()
devtools::submit_cran()
devtools::check_win_devel()
devtools::check_win_release()
devtools::check_rhub()
rhub::validate_email()
devtools::check_rhub
devtools::check_rhub()
library(devtools)
?install_github
devtools::check_rhub()
devtools::check_win_release()
devtools::submit_cran()
build()
devtools::document()
library(randomForestSRC)
library(survival)
library(SurvMetrics)
set.seed(123)
N = 100
mydata = SDGM4(N, p = 20, c_step = -0.5)
index.train = sample(1:N,2/3*N)
data.train = mydata[index.train,]
data.test = mydata[-index.train,]
fit.RSF = rfsrc(Surv(time,status)~.,data.train,nsplit=3,ntree=500)
predicted = predict(fit.RSF,data.test)
sp_matrix = predicted$survival
object = Surv(data.test$time,data.test$status)
#the default time points
IBS(object, sp_matrix, predicted$time.interest)
IBS(object,sp_matrix,c(18:100))
devtools::document()
devtools::check_win_release()
devtools::check_win_release()
devtools::check_rhub()
devtools::check_win_release()
devtools::submit_cran()
library(survival)
install.packages('lme4test')
install.packages('lmer4test')
install.packages('SurvMetrics')
install.packages('SurvMetrics')
install.packages("randomForest")
install.packages("lmerTest")
devtools::document()
devtools::document()
devtools::build()
CindexCR <- function(time, status, predicted, Cause_int = 1){
if (any(is.na(time))) {
stop("The input vector cannot have NA")
}
if (any(is.na(status))) {
stop("The input vector cannot have NA")
}
if (any(is.na(predicted))) {
stop("The input vector cannot have NA")
}
if (!(Cause_int %in% status)) {
stop("Invalid input of Cause_int")
}
if (min(time) <= 0) {
stop("Survival time must be positive")
}
Time_survival = time
Censoring = ifelse(status==min(status), 0, 1)
Cause = ifelse(status==2, 2, 1)
Prediction = -log(predicted)
Time = max(Time_survival)+1
n = length(Prediction)
A = matrix(0, nrow=n, ncol=n)
B = matrix(0, nrow=n, ncol=n)
Q = matrix(0, nrow=n, ncol=n)
N_t = matrix(0, nrow=n, ncol=n)
Num_mat = matrix(0, nrow=n, ncol=n)
Den_mat = matrix(0, nrow=n, ncol=n)
Num=0
Den=0
for (i in  1:n){
A[i,which(Time_survival[i] < Time_survival)] =1
B[i, intersect(intersect(which((Time_survival[i] >= Time_survival)), which(Cause!=Cause_int) ), which(Censoring==1))] = 1
Q[i,which(Prediction[i]>Prediction)]=1
}
for (i in 1:n){
if(Time_survival[i]<=Time && Cause[i]==Cause_int && Censoring[i]==1){
N_t[i,] = 1
}
}
Num_mat = (A+B)*Q*N_t
Den_mat = (A+B)*N_t
Num = sum(Num_mat)
Den = sum(Den_mat)
return(Num/Den)
}
time = c(4, 7, 5, 8)
status = rep(1, 4)
predicted = c(3, 5, 7, 10)
Cause_int = 1
CindexCR(time, status, predicted, Cause_int)
source('D:/lab work/R package/SurvMetrics/R/CindexCR.R')
debugSource('D:/lab work/R package/SurvMetrics/R/CindexCR.R')
CindexCR <- function(time, status, predicted, Cause_int = 1){
if (any(is.na(time))) {
stop("The input vector cannot have NA")
}
if (any(is.na(status))) {
stop("The input vector cannot have NA")
}
if (any(is.na(predicted))) {
stop("The input vector cannot have NA")
}
if (!(Cause_int %in% status)) {
stop("Invalid input of Cause_int")
}
if (min(time) <= 0) {
stop("Survival time must be positive")
}
Time_survival = time
Censoring = ifelse(status==0, 0, 1)
Cause = ifelse(status==2, 2, 1)
Prediction = -log(predicted)
Time = max(Time_survival)+1
n = length(Prediction)
A = matrix(0, nrow=n, ncol=n)
B = matrix(0, nrow=n, ncol=n)
Q = matrix(0, nrow=n, ncol=n)
N_t = matrix(0, nrow=n, ncol=n)
Num_mat = matrix(0, nrow=n, ncol=n)
Den_mat = matrix(0, nrow=n, ncol=n)
Num=0
Den=0
for (i in  1:n){
A[i,which(Time_survival[i] < Time_survival)] =1
B[i, intersect(intersect(which((Time_survival[i] >= Time_survival)), which(Cause!=Cause_int) ), which(Censoring==1))] = 1
Q[i,which(Prediction[i]>Prediction)]=1
}
for (i in 1:n){
if(Time_survival[i]<=Time && Cause[i]==Cause_int && Censoring[i]==1){
N_t[i,] = 1
}
}
Num_mat = (A+B)*Q*N_t
Den_mat = (A+B)*N_t
Num = sum(Num_mat)
Den = sum(Den_mat)
return(Num/Den)
}
time = c(4, 7, 5, 8)
status = rep(1, 4)
predicted = c(3, 5, 7, 10)
Cause_int = 1
CindexCR(time, status, predicted, Cause_int)
CindexCR <- function(time, status, predicted, Cause_int = 1){
if (any(is.na(time))) {
stop("The input vector cannot have NA")
}
if (any(is.na(status))) {
stop("The input vector cannot have NA")
}
if (any(!(status %in% c(0, 1, 2)))) {
stop("The status must be 0 or 1 or 2")
}
if (any(is.na(predicted))) {
stop("The input vector cannot have NA")
}
if (!(Cause_int %in% status)) {
stop("Invalid input of Cause_int")
}
if (min(time) <= 0) {
stop("Survival time must be positive")
}
Time_survival = time
Censoring = ifelse(status==0, 0, 1)
Cause = ifelse(status==2, 2, 1)
Prediction = -log(predicted)
Time = max(Time_survival)+1
n = length(Prediction)
A = matrix(0, nrow=n, ncol=n)
B = matrix(0, nrow=n, ncol=n)
Q = matrix(0, nrow=n, ncol=n)
N_t = matrix(0, nrow=n, ncol=n)
Num_mat = matrix(0, nrow=n, ncol=n)
Den_mat = matrix(0, nrow=n, ncol=n)
Num=0
Den=0
for (i in  1:n){
A[i,which(Time_survival[i] < Time_survival)] =1
B[i, intersect(intersect(which((Time_survival[i] >= Time_survival)), which(Cause!=Cause_int) ), which(Censoring==1))] = 1
Q[i,which(Prediction[i]>Prediction)]=1
}
for (i in 1:n){
if(Time_survival[i]<=Time && Cause[i]==Cause_int && Censoring[i]==1){
N_t[i,] = 1
}
}
Num_mat = (A+B)*Q*N_t
Den_mat = (A+B)*N_t
Num = sum(Num_mat)
Den = sum(Den_mat)
return(Num/Den)
}
time = c(4, 7, 5, 8)
status = rep(1, 4)
predicted = c(3, 5, 7, 10)
Cause_int = 1
CindexCR(time, status, predicted, Cause_int)
devtools::document()
devtools::document()
devtools::build()
devtools::check()
devtools::check_rhub()
library(qpdf)
devtools::check()
library(devtools)
?submit_cran
devtools::release()
devtools::release()
devtools::submit_cran()
library(devtools)
?submit_cran
release_questions()
devtools::check_rhub()
devtools::check()
devtools::release()
devtools::release()
