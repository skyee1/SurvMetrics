}
#default time range for IAEISE()
if(max(IRange) <= 0 ){
IRange <-  range(object[, 1])
}
if (!inherits(object, "Surv")) {
stop("object is not of class Surv")
}
if (missing(object)) {
stop("The survival object of the testing set is missing")
}
if (missing(sp_matrix)) {
stop("The prediction of the survival probability matrix is missing")
}
if (any(is.na(object))) {
stop("The input vector cannot have NA")
}
if (any(is.na(sp_matrix))) {
stop("The input probability matrix cannot have NA")
}
if (length(IRange) <= 1) {
stop("Can not calculate the integration at a single point")
}
if (any(IRange <= 0)) {
stop("The interval must be positive")
}
if (any(diff(IRange) <= 0)) {
stop("The interval value must increase")
}
# Simulation to generate discrete time series
sp_matrix2sp <- apply(sp_matrix, 2, mean)
if (length(IRange) != ncol(sp_matrix)) {
t_IRange <- range(IRange)
p <- ncol(sp_matrix)
IRange <- seq(t_IRange[1], t_IRange[2], length = p)
}
fit0 <- survfit(object ~ 1)
res_sum0 <- survminer::surv_summary(fit0)
KM_frame0 <- data.frame(
"time" = res_sum0$time,
"sp0" = res_sum0$surv,
"sp1" = 0
)[res_sum0$n.event != 0, ]
KM_frame1 <- data.frame(
"time" = IRange,
"sp0" = sp_matrix2sp,
"sp1" = 0
)
for (i in 1:nrow(KM_frame0)) {
t <- KM_frame0$time[i]
if (t < min(KM_frame1$time)) {
KM_frame0$sp1[i] <- 1
} else {
index <- max(which(KM_frame1$time <= t))
KM_frame0$sp1[i] <- KM_frame1$sp0[index]
}
}
KM_frame0$t_IAE <- abs(KM_frame0$sp0 - KM_frame0$sp1)
KM_frame0$t_ISE <- (KM_frame0$sp0 - KM_frame0$sp1)^2
IAE <- 0
ISE <- 0
for (i in 1:(nrow(KM_frame0) - 1)) {
IAE <- IAE + (KM_frame0$time[i + 1] - KM_frame0$time[i]) * KM_frame0$t_IAE[i]
ISE <- ISE + (KM_frame0$time[i + 1] - KM_frame0$time[i]) * KM_frame0$t_ISE[i]
}
IAEISE_value <- c(IAE, ISE)
names(IAEISE_value) <- c("IAE", "ISE")
return(IAEISE_value)
}
IAEISE(Surv(time, status), sp_matrix, c(2, 1))
Surv(c(-1, 1), c(1, 1))
library(survival)
Surv(c(-1, 1), c(1, 1))
devtools::test()
library(survival)
library(randomForestSRC)
library(pec)
set.seed(1234)
mydata <- kidney[, -1]
View(mydata)
table(mydata$status)
18/(18+58)
devtools::test()
library(R.rsp)
install.packages("R.rsp")
browseVignettes("SurvMetrics")
devtools::test()
devtools::test()
#' Brier
#'
#' The Brier Score was proposed by Glenn W. Brier in 1950 which is a proper score function that measures the accuracy of probabilistic predictions, usually used to measure the accuracy of a model fit for survival data.
#' Brier can calculate the value of Brier Score at any timepoint,
#' regardless of whether it is the event time.
#'
#' The Brier Score is the mean square difference between the true classes and the predicted probabilities. So the Brier Score can be thought of as a cost function.
#' Therefore, the lower the Brier Score is for a set of predictions, the better the predictions are calibrated.
#' The Brier Score takes on a value between zero and one, since this is the square of the largest possible difference between a predicted probability and the actual outcome.
#' As we all know, for the cencoring samples, we do not know the real time of death, so the residual cannot be directly calculated when making the prediction.
#' So the Brier Score is widely used in survival analysis.
#'
#' The Brier Score is a strictly proper score (Gneiting and Raftery, 2007), which means that it takes its minimal value only when the predicted probabilities match the empirical probabilities.
#'
#' Judging from the sparse empirical evidence, predictions of duration of survival tend to be rather inaccurate. More precision is achieved by using patient-specific survival probabilities and the Brier score as predictions to discriminate future survivors from failures.
#' @param object object of class \code{Surv} in the testing set created by Surv function.
#' @param pre_sp a vector of predicted values of survival probabilities of each observation in testing set at time t_star.
#' @param t_star the timepoint at which the Brier score you want to calculate.
#'
#'
#' @return the Brier Score at time t_star
#'
#' @author Hanpu Zhou \email{zhouhanpu@csu.edu.cn}
#' @references
#' Graf, Erika, Schmoor, Claudia, Sauerbrei, & Willi, et al. (1999). Assessment and comparison of prognostic classification schemes for survival data. Statist. Med., 18(1718), 2529-2545.
#'
#' Brier, G. W. (1950). Verification of forecasts expressed in terms of probability. Monthly Weather Review, 78.
#'
#' Gneiting, T. , &  Raftery, A. E. . (2007). Strictly Proper Scoring Rules, Prediction, and Estimation.
#' @examples
#' library(survival)
#' time <- rexp(50)
#' status <- sample(c(0, 1), 50, replace = TRUE)
#' pre_sp <- runif(50)
#' t_star <- runif(1)
#' Brier(Surv(time, status), pre_sp, t_star)
#'
#' @importFrom survival Surv
#'
#' @export
#'
Brier <- function(object, pre_sp, t_star = -1) {
# case1、coxph AND testing set
if (inherits(object, "coxph")) {
obj <- object
test_data <- pre_sp
t_star0 <- t_star
# the interesting times of training set
distime <- sort(unique(as.vector(obj$y[obj$y[, 2] == 1])))
if (t_star0 <= 0) {
t_star0 <- median(distime)
} # the fixed time point
#    mat_coxph <- predictSurvProb(obj, test_data, distime) #get the survival probability matrix
vec_coxph <-
predictSurvProb(obj, test_data, t_star0) # get the survival probability vector
object_coxph <- Surv(test_data$time, test_data$status)
object <- object_coxph
pre_sp <- vec_coxph
t_star <- t_star0
}
# case2、RSF AND testing set
if (inherits(object, c("rfsrc"))) {
obj <- object
test_data <- pre_sp
t_star0 <- t_star
# the interesting times of training set
distime <- obj$time.interest
if (t_star0 <= 0) {
t_star0 <- median(distime)
} # the fixed time point
med_index <- order(abs(distime - t_star0))[1]
mat_rsf <-
predict(obj, test_data)$survival # get the survival probability matrix
vec_rsf <-
mat_rsf[, med_index] # get the survival probability vector
object_rsf <- Surv(test_data$time, test_data$status)
object <- object_rsf
pre_sp <- vec_rsf
t_star <- t_star0
}
# case3 survreg AND testing set
if (inherits(object, c("survreg"))) {
obj <- object
test_data <- pre_sp
t_star0 <- t_star
# the interesting times of training set
distime <- sort(unique(as.vector(obj$y[obj$y[, 2] == 1])))
if (t_star0 <= 0) {
t_star0 <- median(distime)
} # the fixed time point
pre_sp <- predictSurvProb.survreg(obj, test_data, t_star0)
object <- Surv(test_data$time, test_data$status)
t_star <- t_star0
}
if (is.na(t_star)) {
stop("Cannot calculate Brier Score at NA")
}
#default time point for Brier(t_star)
if(t_star <= 0 ){
t_star <- median(object[,1][object[,2] == 1])
}
if (length(t_star) != 1) {
stop("Brier Score can only be calculated at a single time point")
}
if (!inherits(object, "Surv")) {
stop("object is not of class Surv")
}
if (missing(object) | missing(pre_sp)) {
stop("The survival object or the prediction is missing")
}
# if (missing(t_star)) {
#   stop("The t_star is missing with no default. when input Surv object, you should give positive t_star")
# }
if (any(is.na(object))) {
stop("The input vector cannot have NA")
}
if (any(is.na(pre_sp))) {
stop("The input probability vector cannot have NA")
}
if (length(object) != length(pre_sp)) {
stop("The prediction survival probability and the survival object have different lengths")
}
time <- object[, 1]
status <- object[, 2]
t_order <- order(time)
time <- time[t_order]
status <- status[t_order]
pre_sp <- pre_sp[t_order]
# Initialization
sum_before_t <- 0
sum_after_t <- 0
Gtstar <- Gt(object, t_star)
for (i in c(1:length(time))) {
# survival time is less than t_star and sample died
if (time[i] < t_star & (status[i] == 1)) {
Gti <- Gt(Surv(time, status), time[i])
if (is.na(Gti)) {
next
}
sum_before_t <- sum_before_t + 1 / Gti * (pre_sp[i])^2 # IPCW
next
}
# survival time is greater than t_star
if (time[i] >= t_star) {
if (is.na(Gtstar)) {
next
}
sum_after_t <- sum_after_t + 1 / Gt(Surv(time, status), t_star) * (1 -
pre_sp[i])^2
} # IPCW
}
BSvalue <- (sum_before_t + sum_after_t) / length(time)
names(BSvalue) <- "Brier Score"
return(round(BSvalue, 6))
}
library(survival)
time <- c(1, 1, 2, 2, 2, 2, 2, 2)
status <- c(0, 1, 1, 0, 1, 1, 0, 1)
pre_sp <- c(0.3, 0.2, 0.4, 0.5, 0.9, 0.1, 0.2, 0.7)
expect_type(Brier(Surv(time, status), pre_sp), "double")
expect_output(Brier(Surv(time, status), pre_sp), 0.468571)
Brier(Surv(time, status), pre_sp)
devtools::test()
Cindex(Surv(c(1,2), c(1,1)), c(0.5, 0.6))
typeof(Cindex(Surv(c(1,2), c(1,1)), c(0.5, 0.6)))
double(1)
expect_equal(Cindex(Surv(c(1,2), c(1,1)), c(0.5, 0.6)), 1.0)
expect_output(Cindex(Surv(c(1,2), c(1,1)), c(0.5, 0.6)), 1)
expect_identical(Cindex(Surv(c(1,2), c(1,1)), c(0.5, 0.6)), 1)
Cindex(Surv(c(1,2), c(1,1)), c(0.6, 0.5))
Cindex(Surv(c(1,2), c(1,1)), c(0.6, 0.5))[1]
as.numeric(Cindex(Surv(c(1,2), c(1,1)), c(0.6, 0.5)))
expect_equal(as.numeric(Cindex(Surv(time, status), predicted)), 0.642857)
expect_equal(as.numeric(Cindex(Surv(c(1,2), c(1,1)), c(0.5, 0.6))), 1)
devtools::test()
expect_equal(as.numeric(IAEISE(Surv(time, status), sp_matrix)), c(132.0101, 44.3022))
devtools::test()
library(randomForestSRC)
library(pec)
# set.seed(1234)
mydata <- kidney[, -1]
train_index <- 1:int(0.7 * nrow(mydata))
train_index <- 1:as.integer(0.7 * nrow(mydata))
devtools::test()
styler::style_dir()
devtools::test()
??predictSurvProb
??predict
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::build(vignettes = FALSE)
devtools::build()
devtools::check()
devtools::check()
devtools::document()
devtools::document()
??survreg
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
namespace:survival
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::build()
devtools::check_rhub()
install.packages("D:/lab work/R package/SurvMetrics_0.5.0.tar.gz", repos = NULL, type = "source")
install.packages("D:/lab work/R package/SurvMetrics_0.5.0.tar.gz", repos = NULL, type = "source")
library(SurvMetrics)
library(survival)
time <- c(1, 1, 2, 2, 2, 2, 2, 2)
status <- c(0, 1, 1, 0, 1, 1, 0, 1)
predicted <- c(2, 3, 3, 3, 4, 2, 4, 3)
expect_type(Cindex(Surv(time, status), predicted), "double")
expect_equal(as.numeric(Cindex(Surv(time, status), predicted)), 0.642857)
expect_equal(as.numeric(Cindex(Surv(c(1, 2), c(1, 1)), c(0.5, 0.6))), 1)
expect_equal(as.numeric(Cindex(Surv(c(1, 2), c(1, 1)), c(0.6, 0.5))), 0)
expect_equal(as.numeric(Cindex(Surv(c(1, 2), c(1, 1)), c(0.5, 0.5))), 0.5)
expect_equal(as.numeric(Cindex(Surv(c(1, 1), c(1, 1)), c(0.5, 0.5))), 1)
expect_equal(as.numeric(Cindex(Surv(c(1, 1), c(1, 1)), c(0.5, 0.6))), 0.5)
expect_equal(as.numeric(Cindex(Surv(c(1, 1), c(1, 0)), c(0.5, 0.5))), 0.5)
expect_equal(as.numeric(Cindex(Surv(c(1, 1), c(1, 0)), c(0.5, 0.6))), 1)
expect_equal(as.numeric(Cindex(Surv(c(1, 1), c(1, 0)), c(0.6, 0.5))), 0.5)
expect_equal(as.numeric(Cindex(Surv(c(1, 2), c(1, 0)), c(0.5, 0.6))), 1)
expect_equal(as.numeric(Cindex(Surv(c(1, 2), c(1, 0)), c(0.5, 0.5))), 0.5)
expect_equal(as.numeric(Cindex(Surv(c(1, 2), c(1, 0)), c(0.6, 0.5))), 0)
library(usethis)
library(survival)
time <- c(1, 1, 2, 2, 2, 2, 2, 2)
status <- c(0, 1, 1, 0, 1, 1, 0, 1)
predicted <- c(2, 3, 3, 3, 4, 2, 4, 3)
expect_type(Cindex(Surv(time, status), predicted), "double")
expect_equal(as.numeric(Cindex(Surv(time, status), predicted)), 0.642857)
expect_equal(as.numeric(Cindex(Surv(c(1, 2), c(1, 1)), c(0.5, 0.6))), 1)
expect_equal(as.numeric(Cindex(Surv(c(1, 2), c(1, 1)), c(0.6, 0.5))), 0)
expect_equal(as.numeric(Cindex(Surv(c(1, 2), c(1, 1)), c(0.5, 0.5))), 0.5)
expect_equal(as.numeric(Cindex(Surv(c(1, 1), c(1, 1)), c(0.5, 0.5))), 1)
expect_equal(as.numeric(Cindex(Surv(c(1, 1), c(1, 1)), c(0.5, 0.6))), 0.5)
expect_equal(as.numeric(Cindex(Surv(c(1, 1), c(1, 0)), c(0.5, 0.5))), 0.5)
expect_equal(as.numeric(Cindex(Surv(c(1, 1), c(1, 0)), c(0.5, 0.6))), 1)
expect_equal(as.numeric(Cindex(Surv(c(1, 1), c(1, 0)), c(0.6, 0.5))), 0.5)
expect_equal(as.numeric(Cindex(Surv(c(1, 2), c(1, 0)), c(0.5, 0.6))), 1)
expect_equal(as.numeric(Cindex(Surv(c(1, 2), c(1, 0)), c(0.5, 0.5))), 0.5)
expect_equal(as.numeric(Cindex(Surv(c(1, 2), c(1, 0)), c(0.6, 0.5))), 0)
Cindex(Surv(time, status), predicted)
library(randomForestSRC)
library(pec)
set.seed(1234)
mydata <- kidney[, -1]
train_index <- sample(1:nrow(mydata), 0.7 * nrow(mydata))
train_data <- mydata[train_index, ]
test_data <- mydata[-train_index, ]
# test coxph
coxfit <- coxph(Surv(time, status) ~ ., data = train_data, x = TRUE)
Cindex(coxfit, test_data)
# test RSF
rsffit <- rfsrc(Surv(time, status) ~ ., data = train_data)
Cindex(rsffit, test_data)
dist = 'weibull'
survregfit <- survreg(Surv(time, status) ~ .,
dist = dist, data = train_data
)
Cindex(survregfit, test_data)
# case 1 Surv object
library(survival)
library(randomForestSRC)
library(pec)
set.seed(1234)
mydata <- kidney[, -1]
train_index <- sample(1:nrow(mydata), 0.7 * nrow(mydata))
train_data <- mydata[train_index, ]
test_data <- mydata[-train_index, ]
# test coxph
coxfit <- coxph(Surv(time, status) ~ ., data = train_data, x = TRUE)
Cindex(coxfit, test_data)
predictSurvProb.survreg(survregfit, test_data, c(4, 5, 6))
predictSurvProb(survregfit, test_data, c(4, 5, 6))
dist = 'weibull'
survregfit <- survreg(Surv(time, status) ~ .,
dist = dist, data = train_data
)
predictSurvProb(survregfit, test_data, c(4, 5, 6))
re <- predictSurvProb(survregfit, test_data, c(4, 5, 6))
re
install.packages("D:/lab work/R package/SurvMetrics_0.5.0.tar.gz", repos = NULL, type = "source")
library(SurvMetrics)
help(SurvMetrics)
??SurvMetrics
library(survival)
time <- rexp(50)
status <- sample(c(0, 1), 50, replace = TRUE)
pre_sp <- runif(50)
t_star <- runif(1)
Brier(Surv(time, status), pre_sp, t_star)
library(survival)
set.seed(1234)
mydata <- kidney[, -1]
train_index <- sample(1:nrow(mydata), 0.7 * nrow(mydata))
train_data <- mydata[train_index, ]
test_data <- mydata[-train_index, ]
survregfit <- survreg(Surv(time, status) ~ ., dist = 'weibull', data = train_data)
pre_sb <- predictSurvProb.survreg(survregfit, test_data, c(10, 20))
library(survival)
set.seed(1234)
mydata <- kidney[, -1]
train_index <- sample(1:nrow(mydata), 0.7 * nrow(mydata))
train_data <- mydata[train_index, ]
test_data <- mydata[-train_index, ]
survregfit <- survreg(Surv(time, status) ~ ., dist = 'weibull', data = train_data)
pre_sb <- predictSurvProb(survregfit, test_data, c(10, 20))
class(survregfit)
library(pec)
library(survival)
set.seed(1234)
mydata <- kidney[, -1]
train_index <- sample(1:nrow(mydata), 0.7 * nrow(mydata))
train_data <- mydata[train_index, ]
test_data <- mydata[-train_index, ]
survregfit <- survreg(Surv(time, status) ~ ., dist = 'weibull', data = train_data)
pre_sb <- predictSurvProb(survregfit, test_data, c(10, 20))
install.packages("D:/lab work/R package/SurvMetrics_0.5.0.tar.gz", repos = NULL, type = "source")
library(survival)
library(SurvMetrics)
library(survival)
set.seed(1234)
mydata <- kidney[, -1]
train_index <- sample(1:nrow(mydata), 0.7 * nrow(mydata))
train_data <- mydata[train_index, ]
test_data <- mydata[-train_index, ]
survregfit <- survreg(Surv(time, status) ~ ., dist = 'weibull', data = train_data)
pre_sb <- predictSurvProb(survregfit, test_data, c(10, 20))
library(SurvMetrics)
library(survival)
set.seed(1234)
mydata <- kidney[, -1]
train_index <- sample(1:nrow(mydata), 0.7 * nrow(mydata))
train_data <- mydata[train_index, ]
test_data <- mydata[-train_index, ]
survregfit <- survreg(Surv(time, status) ~ ., dist = 'weibull', data = train_data)
pre_sb <- predictSurvProb(survregfit, test_data, c(10, 20))
# case 1 Surv object
library(survival)
set.seed(1234)
mydata <- kidney[, -1]
train_index <- sample(1:nrow(mydata), 0.7 * nrow(mydata))
train_data <- mydata[train_index, ]
test_data <- mydata[-train_index, ]
for (dist in c(
"weibull",
"exponential",
"gaussian",
"logistic",
"lognormal",
"loglogistic"
)) {
survregfit <- survreg(Surv(time, status) ~ .,
dist = dist, data = train_data
)
expect_type(Cindex(survregfit, test_data), "double")
}
dist = 'weibull'
survregfit <- survreg(Surv(time, status) ~ .,
dist = dist, data = train_data
)
Cindex(survregfit, test_data)
library(SurvMetrics)
Cindex(survregfit, test_data)
??predictSurvProb.survreg
??predictSurvProb
library(survival)
set.seed(1234)
mydata <- kidney[, -1]
train_index <- sample(1:nrow(mydata), 0.7 * nrow(mydata))
train_data <- mydata[train_index, ]
test_data <- mydata[-train_index, ]
survregfit <- survreg(Surv(time, status) ~ ., dist = 'weibull', data = train_data)
pre_sb <- predictSurvProb(survregfit, test_data, c(10, 20))
library(survival)
set.seed(1234)
mydata <- kidney[, -1]
train_index <- sample(1:nrow(mydata), 0.7 * nrow(mydata))
train_data <- mydata[train_index, ]
test_data <- mydata[-train_index, ]
survregfit <- survreg(Surv(time, status) ~ ., dist = 'weibull', data = train_data)
pre_sb <- predictSurvPro(survregfit, test_data, c(10, 20))
library(SurvMetrics)
library(survival)
set.seed(1234)
mydata <- kidney[, -1]
train_index <- sample(1:nrow(mydata), 0.7 * nrow(mydata))
train_data <- mydata[train_index, ]
test_data <- mydata[-train_index, ]
survregfit <- survreg(Surv(time, status) ~ ., dist = 'weibull', data = train_data)
pre_sb <- predictSurvPro(survregfit, test_data, c(10, 20))
install.packages("D:/lab work/R package/SurvMetrics_0.5.0.tar.gz", repos = NULL, type = "source")
library(SurvMetrics)
library(survival)
set.seed(1234)
mydata <- kidney[, -1]
train_index <- sample(1:nrow(mydata), 0.7 * nrow(mydata))
train_data <- mydata[train_index, ]
test_data <- mydata[-train_index, ]
survregfit <- survreg(Surv(time, status) ~ ., dist = 'weibull', data = train_data)
pre_sb <- predictSurvProb(survregfit, test_data, c(10, 20))
library(survival)
set.seed(1234)
mydata <- kidney[, -1]
train_index <- sample(1:nrow(mydata), 0.7 * nrow(mydata))
train_data <- mydata[train_index, ]
test_data <- mydata[-train_index, ]
survregfit <- survreg(Surv(time, status) ~ ., dist = 'weibull', data = train_data)
pre_sb <- predictSurvProb.survreg(survregfit, test_data, c(10, 20))
??predict.survreg
